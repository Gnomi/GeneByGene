https://jonhilton.net/2017/02/21/create-a-vs2017-angular-2-and-net-core-site-using-the-command-line/

I am using Visual Studio 2017 community edition. First, install SpaTemplate with the foloowing command line
	dotnet new --install Microsoft.AspNetCore.SpaTemplates::*
create new project with command line

   dotnet new angular

FILE: appsettings.json
contain the conntion string file

I use this as my boiler plate to start my project.

FILE: startup.cs
startup.cs is the entry point to setup all the configuration.

in ConfigureServices(), it will grab the connection string from appsettings.json and addMvc() service.

In the Configure(), you can set the MvcRouting. 
at the end of the file, call DbInitializer.Initialie()


DbInitializer.cs
This a code first entity framework.
I put the DbInitializer.cs in the Data folder along with all the Context.cs files.

context.Database.EnsureCreated() //ensure database is there.

Then try to read User table to decide to read the sample data or not.

All the sample files are put in data_files folder.

using System.IO.File to read all the contents and use linq to read one line at a time.

The rest all the same but watch out for the setting in the models
[DatabaseGenerated(DatabaseGeneratedOption.None)]
public int SampleId { get; set; }

Setting the option to None will let u drop the data right in. But at the later time you will run into problem when perform INSERT operation as there's no key.
I have to set it to Identity and skip sampleID and let sql created the key by itself.

One thing I am not sure is how to set it to start at 0 as for the User and Status are zero based sample.



SampleControllers

[HttpGet]
public IEnumerable<Sample> GetSamples()


GET OPERATION:

// GET api/values/5
[HttpGet("{id}")]
public async Task<IActionResult> GetSample([FromRoute] int id)

this is async method with Ok(sample) will return the status code 200 and json data.

//example in localhost: http://localhost:63840/api/sample/status/Active
[HttpGet("[action]/{Status}")]
public IEnumerable<Sample> Status([FromRoute] string status)

//http://localhost:63840/api/sample/Users/name       
[HttpGet("[action]/{User}")]
public IEnumerable<Sample> Users([FromRoute] string user)


// POST api/values
[HttpPost]
public IActionResult Post([FromBody]dynamic authReq)


////////////////////////////////////////////////////////////////////////////////////
////////////   		     [FromBody]dynamic             /////////////////////////
////////////             read through the dynamic array   			//// 
////////////////////////////////////////////////////////////////////////////////////

This is super tricky with angular as angular passing d-json object and webapi having big time trouble to get it.
I have to use dynamic object and read the data off from it one by one as webapi data model doesn't match the one from angular. :(

That's all for the WebAPI side.


----------------------------------------------------------------------------------------
The boiler plate setup the angular code in ClientApp.
Go to ClientApp\app\components and you will see all the components set up there

Anyway, I setup the angular model in ClientApp\App\models
serice is setup in ClientApp\app\service

All the common module file are in app.module.shared.ts 
Very convenient to setup everything in one place.

gotcha
 return this.http.get(this._originUrl + this.sampleUrl)
            .toPromise()
            .then(response => response.json() as Sample[])
            .catch(this.handleError);


////////////////////////////////////////////////////////////////////////////////////
////    Make sure you don't return response.json().data with webapi            /////
////////////             Just return response.json()          			//// 
////////////////////////////////////////////////////////////////////////////////////
https://angular.io/tutorial/toh-pt6#extracting-the-data-in-the-then-callback

Note the shape of the data that the server returns. This particular in-memory web API example returns an object with a data property. Your API might return something else. Adjust the code to match your web API.


You can set the left side menu in navmenu component




